Traceback (most recent call last):
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/fbi005/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
fig = plt.figure(figsize=(14,4))
plt.plot(Yte[n_drop:,:], label="True", linewidth=2)
plt.plot(scaler.inverse_transform(Yhat), label="Predicted")
plt.grid()
plt.legend()
plt.title("True vs predicted electricity load")
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[24], line 3[0m
[1;32m      1[0m fig [38;5;241m=[39m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m14[39m,[38;5;241m4[39m))
[1;32m      2[0m plt[38;5;241m.[39mplot(Yte[n_drop:,:], label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mTrue[39m[38;5;124m"[39m, linewidth[38;5;241m=[39m[38;5;241m2[39m)
[0;32m----> 3[0m plt[38;5;241m.[39mplot([43mscaler[49m[38;5;241;43m.[39;49m[43minverse_transform[49m[43m([49m[43mYhat[49m[43m)[49m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mPredicted[39m[38;5;124m"[39m)
[1;32m      4[0m plt[38;5;241m.[39mgrid()
[1;32m      5[0m plt[38;5;241m.[39mlegend()

File [0;32m~/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/sklearn/preprocessing/_data.py:1106[0m, in [0;36mStandardScaler.inverse_transform[0;34m(self, X, copy)[0m
[1;32m   1103[0m check_is_fitted([38;5;28mself[39m)
[1;32m   1105[0m copy [38;5;241m=[39m copy [38;5;28;01mif[39;00m copy [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m [38;5;28mself[39m[38;5;241m.[39mcopy
[0;32m-> 1106[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[1;32m   1107[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m   1108[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1109[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[1;32m   1110[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mFLOAT_DTYPES[49m[43m,[49m
[1;32m   1111[0m [43m    [49m[43mforce_writeable[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[1;32m   1112[0m [43m    [49m[43mensure_all_finite[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1113[0m [43m[49m[43m)[49m
[1;32m   1115[0m [38;5;28;01mif[39;00m sparse[38;5;241m.[39missparse(X):
[1;32m   1116[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mwith_mean:

File [0;32m~/miniconda3/envs/sta2003_nb/lib/python3.10/site-packages/sklearn/utils/validation.py:1093[0m, in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)[0m
[1;32m   1086[0m         [38;5;28;01melse[39;00m:
[1;32m   1087[0m             msg [38;5;241m=[39m (
[1;32m   1088[0m                 [38;5;124mf[39m[38;5;124m"[39m[38;5;124mExpected 2D array, got 1D array instead:[39m[38;5;130;01m\n[39;00m[38;5;124marray=[39m[38;5;132;01m{[39;00marray[38;5;132;01m}[39;00m[38;5;124m.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m   1089[0m                 [38;5;124m"[39m[38;5;124mReshape your data either using array.reshape(-1, 1) if [39m[38;5;124m"[39m
[1;32m   1090[0m                 [38;5;124m"[39m[38;5;124myour data has a single feature or array.reshape(1, -1) [39m[38;5;124m"[39m
[1;32m   1091[0m                 [38;5;124m"[39m[38;5;124mif it contains a single sample.[39m[38;5;124m"[39m
[1;32m   1092[0m             )
[0;32m-> 1093[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg)
[1;32m   1095[0m [38;5;28;01mif[39;00m dtype_numeric [38;5;129;01mand[39;00m [38;5;28mhasattr[39m(array[38;5;241m.[39mdtype, [38;5;124m"[39m[38;5;124mkind[39m[38;5;124m"[39m) [38;5;129;01mand[39;00m array[38;5;241m.[39mdtype[38;5;241m.[39mkind [38;5;129;01min[39;00m [38;5;124m"[39m[38;5;124mUSV[39m[38;5;124m"[39m:
[1;32m   1096[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1097[0m         [38;5;124m"[39m[38;5;124mdtype=[39m[38;5;124m'[39m[38;5;124mnumeric[39m[38;5;124m'[39m[38;5;124m is not compatible with arrays of bytes/strings.[39m[38;5;124m"[39m
[1;32m   1098[0m         [38;5;124m"[39m[38;5;124mConvert your data to numeric values explicitly instead.[39m[38;5;124m"[39m
[1;32m   1099[0m     )

[0;31mValueError[0m: Expected 2D array, got 1D array instead:
array=[-0.85402349 -1.22315035 -1.26477582 -1.16164855 -0.96634262 -0.64480361
  0.01054327  0.31688893  0.25042412  0.34653831  0.33023396  0.19523821
  0.32464296  0.39702703  0.63181609  0.69911978  0.80346566  1.02410511
  0.39146728  0.14281541 -0.15477461 -0.63162436 -0.94087457 -1.12026625
 -1.18262466 -1.23607089 -1.23146207 -1.02829372 -0.83578931 -0.45047305
  0.24505842  0.44577217  0.50604842  0.55325601  0.5236652   0.38185039
  0.46348778  0.63615576  0.71278712  0.75490115  0.74436542  0.8540638
  0.30556733  0.05085535 -0.22276152 -0.72181955 -1.0739894  -1.26476174
 -1.32274303 -1.39184185 -1.39341639 -1.2358993  -1.06042092 -0.66575816
  0.06454655  0.36776708  0.41650498  0.46983651  0.46209266  0.32022774
  0.38595539  0.45596072  0.46009884  0.51062493  0.64368726  0.77073429
  0.20593786 -0.01058222 -0.24747213 -0.73143233 -1.14182288 -1.35091217
 -1.42296833 -1.47953003 -1.4562028  -1.35280993 -1.31062537 -0.97482129
 -0.32550626  0.00840608  0.18475335  0.23068883  0.28897756  0.14789617
  0.23617081  0.30058113  0.32993712  0.41924487  0.53397419  0.78203733
  0.35105517  0.07431941 -0.27891233 -0.6679645  -1.00635322 -1.22538769
 -1.34250089 -1.44921743 -1.4219701  -1.19196814 -0.87813348 -0.49689501
  0.11426101  0.30898572  0.34637322  0.30023491  0.31615311  0.16262682
  0.20750736  0.33728501  0.34596101  0.33403434  0.48832232  0.74345631
  0.14824866 -0.06391068 -0.44312969 -0.90914631 -1.21914044 -1.35982308
 -1.40465617 -1.47036802 -1.42704705 -1.1931455  -0.773501   -0.46725627
  0.11062465  0.25020428  0.29011744  0.35762592  0.36380709  0.25401561
  0.30505847  0.4795781   0.53167358  0.55398466  0.74892958  0.97806269
  0.44848026  0.11107217 -0.29425692 -0.78921486 -1.11783018 -1.25181962
 -1.30503591 -1.35697065 -1.34656562 -1.10711643 -0.70296627 -0.3736764
  0.16946317  0.29962656  0.2954564   0.31147072  0.33434018  0.21398547
  0.24364785  0.39951529  0.52666712  0.52670947  0.79879573  0.98218379
  0.38965953  0.11250377 -0.31740455 -0.83237327 -1.16764413 -1.29815018
 -1.31875514 -1.38193866 -1.33385822 -1.10091684 -0.70854533 -0.4389428
  0.17749015  0.3741653   0.39620334  0.43171297  0.4743358   0.34347907
  0.39237561  0.47763678  0.50671055  0.59889724  0.76713494  0.93516707
  0.41253414  0.06424887 -0.28600758 -0.78801728 -1.1223446  -1.30811508
 -1.34974051 -1.39333858 -1.36011295 -1.10897283 -0.80198981 -0.42152822
  0.18752815  0.39932705  0.43366503  0.44057417  0.45552754  0.33683118
  0.37474671  0.55639192  0.63388907  0.67822048  0.83077604  0.99449642
  0.39734012  0.10891481 -0.24367092 -0.7352163  -1.09626921 -1.26833156
 -1.31673173 -1.38673778 -1.38722542 -1.22253215 -1.02694818 -0.66675871
  0.06093269  0.36957988  0.43410909  0.44026563  0.492597    0.34581166
  0.35681955  0.46080449  0.49243195  0.56522277  0.83713597  0.94862068
  0.29698014  0.07824733 -0.22753315 -0.75789805 -1.13793351 -1.33509515
 -1.42543538 -1.46531991 -1.42684333 -1.34499843 -1.33627493 -0.97943334
 -0.34810458 -0.02177034  0.17646246  0.27784411  0.34838694  0.14368495
  0.25928179  0.30047449  0.35217588  0.47824558  0.74781792  0.93986768
  0.4276891   0.1793032  -0.2249376  -0.64402142 -1.01571687 -1.21085083
 -1.33267394 -1.40395674].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

